// <auto-generated />
using System;
using System.Collections.Generic;
using System.Net;
using DatabaserForUdviklere.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DatabaserForUdviklere.Migrations
{
    [DbContext(typeof(GlobalogDevelopmentContext))]
    [Migration("20240218181848_AddStatus")]
    partial class AddStatus
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DatabaserForUdviklere.Models.ActiveAdminComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<string>("AuthorType")
                        .HasColumnType("character varying")
                        .HasColumnName("author_type");

                    b.Property<string>("Body")
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Namespace")
                        .HasColumnType("character varying")
                        .HasColumnName("namespace");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("resource_id");

                    b.Property<string>("ResourceType")
                        .HasColumnType("character varying")
                        .HasColumnName("resource_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("active_admin_comments_pkey");

                    b.HasIndex(new[] { "Namespace" }, "index_active_admin_comments_on_namespace");

                    b.ToTable("active_admin_comments", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.AeroDataBoxAircraft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AirlineName")
                        .HasColumnType("character varying")
                        .HasColumnName("airline_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("IataCodeLong")
                        .HasColumnType("character varying")
                        .HasColumnName("iata_code_long");

                    b.Property<string>("IataCodeShort")
                        .HasColumnType("character varying")
                        .HasColumnName("iata_code_short");

                    b.Property<string>("Model")
                        .HasColumnType("character varying")
                        .HasColumnName("model");

                    b.Property<string>("ModelCode")
                        .HasColumnType("character varying")
                        .HasColumnName("model_code");

                    b.Property<string>("Reg")
                        .HasColumnType("character varying")
                        .HasColumnName("reg");

                    b.Property<string>("TypeName")
                        .HasColumnType("character varying")
                        .HasColumnName("type_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("aero_data_box_aircrafts_pkey");

                    b.ToTable("aero_data_box_aircrafts", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.AggregatedFlight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcEngineCount")
                        .HasColumnType("integer")
                        .HasColumnName("ac_engine_count");

                    b.Property<int?>("AcId")
                        .HasColumnType("integer")
                        .HasColumnName("ac_id");

                    b.Property<string>("AcManufacturerName")
                        .HasColumnType("character varying")
                        .HasColumnName("ac_manufacturer_name");

                    b.Property<int?>("AcModelId")
                        .HasColumnType("integer")
                        .HasColumnName("ac_model_id");

                    b.Property<string>("AcModelName")
                        .HasColumnType("character varying")
                        .HasColumnName("ac_model_name");

                    b.Property<string>("AcRegistrationCode")
                        .HasColumnType("character varying")
                        .HasColumnName("ac_registration_code");

                    b.Property<string>("ArrivalAirportCountryName")
                        .HasColumnType("character varying")
                        .HasColumnName("arrival_airport_country_name");

                    b.Property<int?>("ArrivalAirportGmtOffset")
                        .HasColumnType("integer")
                        .HasColumnName("arrival_airport_gmt_offset");

                    b.Property<string>("ArrivalAirportIata")
                        .HasColumnType("character varying")
                        .HasColumnName("arrival_airport_iata");

                    b.Property<string>("ArrivalAirportIcao")
                        .HasColumnType("character varying")
                        .HasColumnName("arrival_airport_icao");

                    b.Property<int?>("ArrivalAirportId")
                        .HasColumnType("integer")
                        .HasColumnName("arrival_airport_id");

                    b.Property<decimal?>("ArrivalAirportLatitude")
                        .HasPrecision(10, 6)
                        .HasColumnType("numeric(10,6)")
                        .HasColumnName("arrival_airport_latitude");

                    b.Property<decimal?>("ArrivalAirportLongitude")
                        .HasPrecision(10, 6)
                        .HasColumnType("numeric(10,6)")
                        .HasColumnName("arrival_airport_longitude");

                    b.Property<string>("ArrivalAirportName")
                        .HasColumnType("character varying")
                        .HasColumnName("arrival_airport_name");

                    b.Property<string>("ArrivalAirportProvinceName")
                        .HasColumnType("character varying")
                        .HasColumnName("arrival_airport_province_name");

                    b.Property<int?>("ArrivalAirportRunwayAltitude")
                        .HasColumnType("integer")
                        .HasColumnName("arrival_airport_runway_altitude");

                    b.Property<int?>("ArrivalAirportRunwayLength")
                        .HasColumnType("integer")
                        .HasColumnName("arrival_airport_runway_length");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DepartureAirportCountryName")
                        .HasColumnType("character varying")
                        .HasColumnName("departure_airport_country_name");

                    b.Property<int?>("DepartureAirportGmtOffset")
                        .HasColumnType("integer")
                        .HasColumnName("departure_airport_gmt_offset");

                    b.Property<string>("DepartureAirportIata")
                        .HasColumnType("character varying")
                        .HasColumnName("departure_airport_iata");

                    b.Property<string>("DepartureAirportIcao")
                        .HasColumnType("character varying")
                        .HasColumnName("departure_airport_icao");

                    b.Property<int?>("DepartureAirportId")
                        .HasColumnType("integer")
                        .HasColumnName("departure_airport_id");

                    b.Property<decimal?>("DepartureAirportLatitude")
                        .HasPrecision(10, 6)
                        .HasColumnType("numeric(10,6)")
                        .HasColumnName("departure_airport_latitude");

                    b.Property<decimal?>("DepartureAirportLongitude")
                        .HasPrecision(10, 6)
                        .HasColumnType("numeric(10,6)")
                        .HasColumnName("departure_airport_longitude");

                    b.Property<string>("DepartureAirportName")
                        .HasColumnType("character varying")
                        .HasColumnName("departure_airport_name");

                    b.Property<string>("DepartureAirportProvinceName")
                        .HasColumnType("character varying")
                        .HasColumnName("departure_airport_province_name");

                    b.Property<int?>("DepartureAirportRunwayAltitude")
                        .HasColumnType("integer")
                        .HasColumnName("departure_airport_runway_altitude");

                    b.Property<int?>("DepartureAirportRunwayLength")
                        .HasColumnType("integer")
                        .HasColumnName("departure_airport_runway_length");

                    b.Property<int?>("FlightAirTime")
                        .HasColumnType("integer")
                        .HasColumnName("flight_air_time");

                    b.Property<DateTime?>("FlightArrivalTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("flight_arrival_time");

                    b.Property<int?>("FlightBlockTime")
                        .HasColumnType("integer")
                        .HasColumnName("flight_block_time");

                    b.Property<DateTime?>("FlightCreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("flight_created_at");

                    b.Property<int?>("FlightDayMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("flight_day_minutes");

                    b.Property<DateTime?>("FlightDepartureTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("flight_departure_time");

                    b.Property<int?>("FlightId")
                        .HasColumnType("integer")
                        .HasColumnName("flight_id");

                    b.Property<string>("FlightName")
                        .HasColumnType("character varying")
                        .HasColumnName("flight_name");

                    b.Property<int?>("FlightNightMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("flight_night_minutes");

                    b.Property<DateTime?>("FlightOffBlock")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("flight_off_block");

                    b.Property<DateTime?>("FlightOnBlock")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("flight_on_block");

                    b.Property<decimal?>("FlightRadiation")
                        .HasColumnType("numeric")
                        .HasColumnName("flight_radiation");

                    b.Property<DateTime?>("FlightRelationCreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("flight_relation_created_at");

                    b.Property<int?>("FlightRelationId")
                        .HasColumnType("integer")
                        .HasColumnName("flight_relation_id");

                    b.Property<int?>("FlightRelationRoleId")
                        .HasColumnType("integer")
                        .HasColumnName("flight_relation_role_id");

                    b.Property<string>("FlightRelationRoleName")
                        .HasColumnType("character varying")
                        .HasColumnName("flight_relation_role_name");

                    b.Property<string>("FlightType")
                        .HasColumnType("character varying")
                        .HasColumnName("flight_type");

                    b.Property<DateTime?>("FlightUpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("flight_updated_at");

                    b.Property<bool?>("NightLanding")
                        .HasColumnType("boolean")
                        .HasColumnName("night_landing");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.Property<string>("OwnerName")
                        .HasColumnType("character varying")
                        .HasColumnName("owner_name");

                    b.Property<string>("RadSource")
                        .HasColumnType("character varying")
                        .HasColumnName("rad_source");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserDefaultRoleName")
                        .HasColumnType("character varying")
                        .HasColumnName("user_default_role_name");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying")
                        .HasColumnName("user_name");

                    b.Property<DateTime?>("UserPregDeclAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("user_preg_decl_at");

                    b.HasKey("Id")
                        .HasName("aggregated_flights_pkey");

                    b.HasIndex(new[] { "AcRegistrationCode" }, "index_aggregated_flights_on_ac_registration_code");

                    b.HasIndex(new[] { "CreatedAt" }, "index_aggregated_flights_on_created_at")
                        .HasFilter("(flight_relation_id IS NULL)");

                    b.HasIndex(new[] { "CreatedAt" }, "index_aggregated_flights_on_created_at2");

                    b.HasIndex(new[] { "FlightId" }, "index_aggregated_flights_on_flight_id");

                    b.HasIndex(new[] { "FlightId", "FlightRelationId" }, "index_aggregated_flights_on_flight_id_and_flight_relation_id")
                        .IsUnique();

                    b.HasIndex(new[] { "FlightOffBlock" }, "index_aggregated_flights_on_flight_off_block");

                    b.HasIndex(new[] { "FlightRelationId" }, "index_aggregated_flights_on_flight_relation_id")
                        .IsUnique();

                    b.HasIndex(new[] { "FlightRelationRoleName" }, "index_aggregated_flights_on_flight_relation_role_name");

                    b.HasIndex(new[] { "FlightUpdatedAt" }, "index_aggregated_flights_on_flight_updated_at");

                    b.HasIndex(new[] { "OwnerId" }, "index_aggregated_flights_on_owner_id");

                    b.HasIndex(new[] { "UserId" }, "index_aggregated_flights_on_user_id");

                    b.HasIndex(new[] { "UserPregDeclAt" }, "index_aggregated_flights_on_user_preg_decl_at");

                    b.HasIndex(new[] { "FlightOffBlock" }, "index_off_block_f_rel_null")
                        .HasFilter("(flight_relation_id IS NULL)");

                    b.ToTable("aggregated_flights", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.AhoyEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Properties")
                        .HasColumnType("jsonb")
                        .HasColumnName("properties");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int?>("VisitId")
                        .HasColumnType("integer")
                        .HasColumnName("visit_id");

                    b.HasKey("Id")
                        .HasName("ahoy_events_pkey");

                    b.HasIndex(new[] { "Name", "Time" }, "index_ahoy_events_on_name_and_time");

                    b.ToTable("ahoy_events", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.AhoyVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppVersion")
                        .HasColumnType("character varying")
                        .HasColumnName("app_version");

                    b.Property<string>("Browser")
                        .HasColumnType("character varying")
                        .HasColumnName("browser");

                    b.Property<string>("City")
                        .HasColumnType("character varying")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasColumnType("character varying")
                        .HasColumnName("country");

                    b.Property<string>("DeviceType")
                        .HasColumnType("character varying")
                        .HasColumnName("device_type");

                    b.Property<string>("Ip")
                        .HasColumnType("character varying")
                        .HasColumnName("ip");

                    b.Property<string>("LandingPage")
                        .HasColumnType("text")
                        .HasColumnName("landing_page");

                    b.Property<decimal?>("Latitude")
                        .HasPrecision(10, 8)
                        .HasColumnType("numeric(10,8)")
                        .HasColumnName("latitude");

                    b.Property<decimal?>("Longitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("numeric(11,8)")
                        .HasColumnName("longitude");

                    b.Property<string>("Os")
                        .HasColumnType("character varying")
                        .HasColumnName("os");

                    b.Property<string>("OsVersion")
                        .HasColumnType("character varying")
                        .HasColumnName("os_version");

                    b.Property<string>("Platform")
                        .HasColumnType("character varying")
                        .HasColumnName("platform");

                    b.Property<string>("Referrer")
                        .HasColumnType("text")
                        .HasColumnName("referrer");

                    b.Property<string>("ReferringDomain")
                        .HasColumnType("character varying")
                        .HasColumnName("referring_domain");

                    b.Property<string>("Region")
                        .HasColumnType("character varying")
                        .HasColumnName("region");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("UtmCampaign")
                        .HasColumnType("character varying")
                        .HasColumnName("utm_campaign");

                    b.Property<string>("UtmContent")
                        .HasColumnType("character varying")
                        .HasColumnName("utm_content");

                    b.Property<string>("UtmMedium")
                        .HasColumnType("character varying")
                        .HasColumnName("utm_medium");

                    b.Property<string>("UtmSource")
                        .HasColumnType("character varying")
                        .HasColumnName("utm_source");

                    b.Property<string>("UtmTerm")
                        .HasColumnType("character varying")
                        .HasColumnName("utm_term");

                    b.Property<string>("VisitToken")
                        .HasColumnType("character varying")
                        .HasColumnName("visit_token");

                    b.Property<string>("VisitorToken")
                        .HasColumnType("character varying")
                        .HasColumnName("visitor_token");

                    b.HasKey("Id")
                        .HasName("ahoy_visits_pkey");

                    b.HasIndex(new[] { "VisitToken" }, "index_ahoy_visits_on_visit_token")
                        .IsUnique();

                    b.ToTable("ahoy_visits", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.AirAtlantaFeb16ToFeb18", b =>
                {
                    b.Property<string>("AcReg")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ac_reg");

                    b.Property<string>("DepartureIata")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("departure_iata");

                    b.Property<string>("FlightNo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("flight_no");

                    b.Property<string>("FlightSeq")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("flight_seq");

                    b.Property<DateTime?>("OffBlock")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("off_block");

                    b.Property<decimal?>("Radiation")
                        .HasColumnType("numeric")
                        .HasColumnName("radiation");

                    b.ToTable("air_atlanta_feb16_to_feb18", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.Aircraft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AeroDataBoxAircraftId")
                        .HasColumnType("integer")
                        .HasColumnName("aero_data_box_aircraft_id");

                    b.Property<int?>("AircraftModelId")
                        .HasColumnType("integer")
                        .HasColumnName("aircraft_model_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<bool?>("IsSimulator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_simulator");

                    b.Property<bool?>("ModelConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("model_confirmed");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.Property<string>("RegistrationCode")
                        .HasColumnType("character varying")
                        .HasColumnName("registration_code");

                    b.Property<bool?>("SkipRadCalc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("skip_rad_calc");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("aircrafts_pkey");

                    b.HasIndex(new[] { "RegistrationCode" }, "index_aircrafts_on_registration_code");

                    b.ToTable("aircrafts", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.AircraftCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .HasColumnType("character varying")
                        .HasColumnName("short_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("aircraft_categories_pkey");

                    b.ToTable("aircraft_categories", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.AircraftManufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("aircraft_manufacturers_pkey");

                    b.ToTable("aircraft_manufacturers", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.AircraftModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AircraftCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("aircraft_category_id");

                    b.Property<int?>("AircraftManufacturerId")
                        .HasColumnType("integer")
                        .HasColumnName("aircraft_manufacturer_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("Engines")
                        .HasColumnType("integer")
                        .HasColumnName("engines");

                    b.Property<string>("IcaoCode")
                        .HasColumnType("character varying")
                        .HasColumnName("icao_code");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Wtc")
                        .HasColumnType("character varying")
                        .HasColumnName("wtc");

                    b.HasKey("Id")
                        .HasName("aircraft_models_pkey");

                    b.ToTable("aircraft_models", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.AircraftProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AircraftModelId")
                        .HasColumnType("integer")
                        .HasColumnName("aircraft_model_id");

                    b.Property<int?>("Altitude")
                        .HasColumnType("integer")
                        .HasColumnName("altitude");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("Minutes")
                        .HasColumnType("integer")
                        .HasColumnName("minutes");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("aircraft_profiles_pkey");

                    b.HasIndex(new[] { "AircraftModelId" }, "index_aircraft_profiles_on_aircraft_model_id");

                    b.HasIndex(new[] { "Altitude" }, "index_aircraft_profiles_on_altitude");

                    b.HasIndex(new[] { "Minutes" }, "index_aircraft_profiles_on_minutes");

                    b.ToTable("aircraft_profiles", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.Airport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("GmtOffset")
                        .HasColumnType("integer")
                        .HasColumnName("gmt_offset");

                    b.Property<string>("IataCode")
                        .HasColumnType("character varying")
                        .HasColumnName("iata_code");

                    b.Property<string>("IcaoCode")
                        .HasColumnType("character varying")
                        .HasColumnName("icao_code");

                    b.Property<decimal?>("Latitude")
                        .HasPrecision(10, 6)
                        .HasColumnType("numeric(10,6)")
                        .HasColumnName("latitude");

                    b.Property<decimal?>("Longitude")
                        .HasPrecision(10, 6)
                        .HasColumnType("numeric(10,6)")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<int?>("RunwayAltitude")
                        .HasColumnType("integer")
                        .HasColumnName("runway_altitude");

                    b.Property<int?>("RunwayLength")
                        .HasColumnType("integer")
                        .HasColumnName("runway_length");

                    b.Property<string>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("state")
                        .HasDefaultValueSql("'draft'::character varying");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("airports_pkey");

                    b.HasIndex(new[] { "IataCode" }, "index_airports_on_iata_code");

                    b.HasIndex(new[] { "IcaoCode" }, "index_airports_on_icao_code");

                    b.ToTable("airports", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.ApiRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("HttpStatusCode")
                        .HasColumnType("character varying")
                        .HasColumnName("http_status_code");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.Property<string>("Params")
                        .HasColumnType("text")
                        .HasColumnName("params");

                    b.Property<string>("Status")
                        .HasColumnType("character varying")
                        .HasColumnName("status");

                    b.Property<string>("Task")
                        .HasColumnType("character varying")
                        .HasColumnName("task");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("api_requests_pkey");

                    b.HasIndex(new[] { "OwnerId" }, "index_api_requests_on_owner_id");

                    b.ToTable("api_requests", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.ApproachType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .HasColumnType("character varying")
                        .HasColumnName("short_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("approach_types_pkey");

                    b.ToTable("approach_types", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.CopyOfPostLaunchFlight", b =>
                {
                    b.Property<string>("AcReg")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("ac_reg");

                    b.Property<int?>("AircraftId")
                        .HasColumnType("integer")
                        .HasColumnName("aircraft_id");

                    b.Property<int?>("AircraftModelId")
                        .HasColumnType("integer")
                        .HasColumnName("aircraft_model_id");

                    b.Property<List<int>>("AlternativeFlghts")
                        .HasColumnType("integer[]")
                        .HasColumnName("alternative_flghts");

                    b.Property<bool?>("Concurrent")
                        .HasColumnType("boolean")
                        .HasColumnName("concurrent");

                    b.Property<string>("Csv")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("csv");

                    b.Property<string>("DepartureCode")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("departure_code");

                    b.Property<string>("FlightName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("flight_name");

                    b.Property<int?>("FlightSeq")
                        .HasColumnType("integer")
                        .HasColumnName("flight_seq");

                    b.Property<int?>("MatchedFlight")
                        .HasColumnType("integer")
                        .HasColumnName("matched_flight");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("message");

                    b.Property<DateTime?>("OffBlock")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("off_block");

                    b.Property<decimal?>("Radiation")
                        .HasPrecision(10, 6)
                        .HasColumnType("numeric(10,6)")
                        .HasColumnName("radiation");

                    b.ToTable("copy_of_post_launch_flights", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Iso2Code")
                        .HasColumnType("character varying")
                        .HasColumnName("iso_2_code");

                    b.Property<string>("IsoCode")
                        .HasColumnType("character varying")
                        .HasColumnName("iso_code");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Province")
                        .HasColumnType("character varying")
                        .HasColumnName("province");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("countries_pkey");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.CustomerStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActiveAc")
                        .HasColumnType("integer")
                        .HasColumnName("active_ac");

                    b.Property<int?>("ActiveCrew")
                        .HasColumnType("integer")
                        .HasColumnName("active_crew");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("CrewOps")
                        .HasColumnType("integer")
                        .HasColumnName("crew_ops");

                    b.Property<int?>("CrewOpsWithRad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("crew_ops_with_rad");

                    b.Property<int?>("CrewSimulatorOps")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("crew_simulator_ops");

                    b.Property<int?>("Flights")
                        .HasColumnType("integer")
                        .HasColumnName("flights");

                    b.Property<string>("Month")
                        .HasColumnType("character varying")
                        .HasColumnName("month");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("customer_stats_pkey");

                    b.ToTable("customer_stats", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("EventType")
                        .HasColumnType("character varying")
                        .HasColumnName("event_type");

                    b.Property<string>("Info")
                        .HasColumnType("jsonb")
                        .HasColumnName("info");

                    b.Property<int?>("LogLevel")
                        .HasColumnType("integer")
                        .HasColumnName("log_level");

                    b.Property<string>("Payload")
                        .HasColumnType("jsonb")
                        .HasColumnName("payload");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("events_pkey");

                    b.HasIndex(new[] { "CreatedAt" }, "index_events_on_created_at");

                    b.HasIndex(new[] { "EventType" }, "index_events_on_event_type");

                    b.HasIndex(new[] { "LogLevel" }, "index_events_on_log_level");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.FileLines2", b =>
                {
                    b.Property<int?>("AircraftId")
                        .HasColumnType("integer")
                        .HasColumnName("aircraft_id");

                    b.Property<string>("CallSign")
                        .HasColumnType("character varying")
                        .HasColumnName("call_sign");

                    b.Property<bool?>("Deletion")
                        .HasColumnType("boolean")
                        .HasColumnName("deletion");

                    b.Property<string>("DepPort")
                        .HasColumnType("character varying")
                        .HasColumnName("dep_port");

                    b.Property<int?>("DepartureAirportId")
                        .HasColumnType("integer")
                        .HasColumnName("departure_airport_id");

                    b.Property<int?>("FileLines")
                        .HasColumnType("integer")
                        .HasColumnName("file_lines");

                    b.Property<DateTime?>("FileMtime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("file_mtime");

                    b.Property<string>("FileName")
                        .HasColumnType("character varying")
                        .HasColumnName("file_name");

                    b.Property<int?>("FileSize")
                        .HasColumnType("integer")
                        .HasColumnName("file_size");

                    b.Property<string>("FileType")
                        .HasColumnType("character varying")
                        .HasColumnName("file_type");

                    b.Property<string>("FtpUsername")
                        .HasColumnType("character varying")
                        .HasColumnName("ftp_username");

                    b.Property<string>("LineContent")
                        .HasColumnType("character varying")
                        .HasColumnName("line_content");

                    b.Property<int?>("LineNumber")
                        .HasColumnType("integer")
                        .HasColumnName("line_number");

                    b.Property<string>("LoadId")
                        .HasColumnType("character varying")
                        .HasColumnName("load_id");

                    b.Property<DateTime?>("OffBlock")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("off_block");

                    b.Property<string>("OffBlockRaw")
                        .HasColumnType("character varying")
                        .HasColumnName("off_block_raw");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.ToTable("file_lines2", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AircraftId")
                        .HasColumnType("integer")
                        .HasColumnName("aircraft_id");

                    b.Property<int?>("ApproachTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("approach_type_id");

                    b.Property<int?>("ArrivalAirportId")
                        .HasColumnType("integer")
                        .HasColumnName("arrival_airport_id");

                    b.Property<DateTime?>("ArrivalTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("arrival_time");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("DepartureAirportId")
                        .HasColumnType("integer")
                        .HasColumnName("departure_airport_id");

                    b.Property<DateTime?>("DepartureTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("departure_time");

                    b.Property<int?>("FallbackAcId")
                        .HasColumnType("integer")
                        .HasColumnName("fallback_ac_id");

                    b.Property<int?>("FlightAwareFlightId")
                        .HasColumnType("integer")
                        .HasColumnName("flight_aware_flight_id");

                    b.Property<int?>("FlightTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("flight_type_id");

                    b.Property<string>("ForeignId")
                        .HasColumnType("character varying")
                        .HasColumnName("foreign_id");

                    b.Property<double?>("GctRad")
                        .HasColumnType("double precision")
                        .HasColumnName("gct_rad");

                    b.Property<string>("LoadFilename")
                        .HasColumnType("character varying")
                        .HasColumnName("load_filename");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<bool?>("NightLanding")
                        .HasColumnType("boolean")
                        .HasColumnName("night_landing");

                    b.Property<string>("Note")
                        .HasColumnType("character varying")
                        .HasColumnName("note");

                    b.Property<DateTime?>("OffBlock")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("off_block");

                    b.Property<DateTime?>("OnBlock")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("on_block");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.Property<string>("RadSource")
                        .HasColumnType("character varying")
                        .HasColumnName("rad_source");

                    b.Property<decimal?>("RadiationAmount")
                        .HasPrecision(10, 6)
                        .HasColumnType("numeric(10,6)")
                        .HasColumnName("radiation_amount");

                    b.Property<bool?>("Recalc")
                        .HasColumnType("boolean")
                        .HasColumnName("recalc");

                    b.Property<int?>("RouteDefinedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("route_defined_by");

                    b.Property<double?>("RrtRad")
                        .HasColumnType("double precision")
                        .HasColumnName("rrt_rad");

                    b.Property<string>("Status")
                        .HasColumnType("character varying")
                        .HasColumnName("status");

                    b.Property<int?>("TotalDayMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("total_day_minutes");

                    b.Property<int?>("TotalInstrMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("total_instr_minutes");

                    b.Property<int?>("TotalNightMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("total_night_minutes");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<DateTime?>("WorkerStartedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("worker_started_at");

                    b.HasKey("Id")
                        .HasName("flights_pkey");

                    b.HasIndex(new[] { "Name", "DepartureAirportId", "OffBlock" }, "index_flights_combined");

                    b.HasIndex(new[] { "AircraftId" }, "index_flights_on_aircraft_id");

                    b.HasIndex(new[] { "ApproachTypeId" }, "index_flights_on_approach_type_id");

                    b.HasIndex(new[] { "ArrivalAirportId" }, "index_flights_on_arrival_airport_id");

                    b.HasIndex(new[] { "CreatedAt" }, "index_flights_on_created_at");

                    b.HasIndex(new[] { "DepartureAirportId" }, "index_flights_on_departure_airport_id");

                    b.HasIndex(new[] { "FlightTypeId" }, "index_flights_on_flight_type_id");

                    b.HasIndex(new[] { "Id" }, "index_flights_on_id")
                        .HasFilter("((status)::text = 'COMMITED'::text)");

                    b.HasIndex(new[] { "OffBlock" }, "index_flights_on_off_block");

                    b.HasIndex(new[] { "OnBlock" }, "index_flights_on_on_block");

                    b.HasIndex(new[] { "OwnerId" }, "index_flights_on_owner_id");

                    b.HasIndex(new[] { "UpdatedAt" }, "index_flights_on_updated_at");

                    b.ToTable("flights", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.FlightAwareAirport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("character varying")
                        .HasColumnName("city");

                    b.Property<string>("CountryCode")
                        .HasColumnType("character varying")
                        .HasColumnName("country_code");

                    b.Property<double?>("Elevation")
                        .HasColumnType("double precision")
                        .HasColumnName("elevation");

                    b.Property<string>("IataCode")
                        .HasColumnType("character varying")
                        .HasColumnName("iata_code");

                    b.Property<string>("IcaoCode")
                        .HasColumnType("character varying")
                        .HasColumnName("icao_code");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Province")
                        .HasColumnType("character varying")
                        .HasColumnName("province");

                    b.Property<string>("Timezone")
                        .HasColumnType("character varying")
                        .HasColumnName("timezone");

                    b.Property<string>("WikiUrl")
                        .HasColumnType("character varying")
                        .HasColumnName("wiki_url");

                    b.HasKey("Id")
                        .HasName("flight_aware_airports_pkey");

                    b.ToTable("flight_aware_airports", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.FlightAwareFlight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualArrivalTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("actual_arrival_time");

                    b.Property<DateTime?>("ActualBlockinTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("actual_blockin_time");

                    b.Property<DateTime?>("ActualBlockoutTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("actual_blockout_time");

                    b.Property<DateTime?>("ActualDepartureTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("actual_departure_time");

                    b.Property<bool?>("Adhoc")
                        .HasColumnType("boolean")
                        .HasColumnName("adhoc");

                    b.Property<string>("Aircrafttype")
                        .HasColumnType("character varying")
                        .HasColumnName("aircrafttype");

                    b.Property<string>("Airline")
                        .HasColumnType("character varying")
                        .HasColumnName("airline");

                    b.Property<string>("AirlineIata")
                        .HasColumnType("character varying")
                        .HasColumnName("airline_iata");

                    b.Property<int?>("ArrivalDelay")
                        .HasColumnType("integer")
                        .HasColumnName("arrival_delay");

                    b.Property<string>("AtcIdent")
                        .HasColumnType("character varying")
                        .HasColumnName("atc_ident");

                    b.Property<bool?>("Blocked")
                        .HasColumnType("boolean")
                        .HasColumnName("blocked");

                    b.Property<bool?>("Cancelled")
                        .HasColumnType("boolean")
                        .HasColumnName("cancelled");

                    b.Property<string>("Codeshares")
                        .HasColumnType("character varying")
                        .HasColumnName("codeshares");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<bool?>("Datalink")
                        .HasColumnType("boolean")
                        .HasColumnName("datalink");

                    b.Property<int?>("DepartureDelay")
                        .HasColumnType("integer")
                        .HasColumnName("departure_delay");

                    b.Property<string>("Destination")
                        .HasColumnType("character varying")
                        .HasColumnName("destination");

                    b.Property<bool?>("Diverted")
                        .HasColumnType("boolean")
                        .HasColumnName("diverted");

                    b.Property<string>("FaIdent")
                        .HasColumnType("character varying")
                        .HasColumnName("fa_ident");

                    b.Property<DateTime?>("FiledArrivalTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("filed_arrival_time");

                    b.Property<DateTime?>("FiledBlockinTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("filed_blockin_time");

                    b.Property<DateTime?>("FiledBlockoutTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("filed_blockout_time");

                    b.Property<DateTime?>("FiledDepartureTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("filed_departure_time");

                    b.Property<int?>("FiledEte")
                        .HasColumnType("integer")
                        .HasColumnName("filed_ete");

                    b.Property<string>("FlightTracks")
                        .HasColumnType("jsonb")
                        .HasColumnName("flight_tracks");

                    b.Property<string>("FlightType")
                        .HasColumnType("character varying")
                        .HasColumnName("flight_type");

                    b.Property<string>("Flightnumber")
                        .HasColumnType("character varying")
                        .HasColumnName("flightnumber");

                    b.Property<string>("FullAircrafttype")
                        .HasColumnType("character varying")
                        .HasColumnName("full_aircrafttype");

                    b.Property<string>("Ident")
                        .HasColumnType("character varying")
                        .HasColumnName("ident");

                    b.Property<string>("Origin")
                        .HasColumnType("character varying")
                        .HasColumnName("origin");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.Property<double?>("Radiation")
                        .HasColumnType("double precision")
                        .HasColumnName("radiation");

                    b.Property<string>("Route")
                        .HasColumnType("character varying")
                        .HasColumnName("route");

                    b.Property<int?>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<string>("Status")
                        .HasColumnType("character varying")
                        .HasColumnName("status");

                    b.Property<string>("Tailnumber")
                        .HasColumnType("character varying")
                        .HasColumnName("tailnumber");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("flight_aware_flights_pkey");

                    b.HasIndex(new[] { "FaIdent" }, "index_flight_aware_flights_on_fa_ident");

                    b.ToTable("flight_aware_flights", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.FlightRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("FlightId")
                        .HasColumnType("integer")
                        .HasColumnName("flight_id");

                    b.Property<bool?>("FlyingPilot")
                        .HasColumnType("boolean")
                        .HasColumnName("flying_pilot");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int?>("SecondaryRoleId")
                        .HasColumnType("integer")
                        .HasColumnName("secondary_role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<decimal?>("UserRadiationAmount")
                        .HasPrecision(10, 6)
                        .HasColumnType("numeric(10,6)")
                        .HasColumnName("user_radiation_amount");

                    b.HasKey("Id")
                        .HasName("flight_relations_pkey");

                    b.HasIndex(new[] { "FlightId", "UserId", "RoleId" }, "index_flight_relations_combined");

                    b.HasIndex(new[] { "FlightId" }, "index_flight_relations_on_flight_id");

                    b.HasIndex(new[] { "FlightId", "UserId" }, "index_flight_relations_on_flight_id_and_user_id")
                        .IsUnique();

                    b.HasIndex(new[] { "RoleId" }, "index_flight_relations_on_role_id");

                    b.HasIndex(new[] { "UserId" }, "index_flight_relations_on_user_id");

                    b.ToTable("flight_relations", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.FlightTrack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("FlightId")
                        .HasColumnType("integer")
                        .HasColumnName("flight_id");

                    b.Property<string>("FlightTrackSteps")
                        .HasColumnType("jsonb")
                        .HasColumnName("flight_track_steps");

                    b.Property<double?>("Radiation")
                        .HasColumnType("double precision")
                        .HasColumnName("radiation");

                    b.Property<int>("Region")
                        .HasColumnType("integer");

                    b.Property<string>("TrackSource")
                        .HasColumnType("character varying")
                        .HasColumnName("track_source");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("flight_tracks_pkey");

                    b.HasIndex(new[] { "FlightId" }, "index_flight_tracks_on_flight_id");

                    b.ToTable("flight_tracks", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.FlightType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("flight_types_pkey");

                    b.ToTable("flight_types", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.FlightsOldSystem", b =>
                {
                    b.Property<string>("ArrivalDatetime")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("arrival_datetime");

                    b.Property<string>("DepartureDatetime")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("departure_datetime");

                    b.Property<string>("DepartureIata")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("departure_iata");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("note");

                    b.Property<string>("OffBlock")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("off_block");

                    b.Property<string>("OnBlock")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("on_block");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.ToTable("flights_old_system", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.Idp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("idps_pkey");

                    b.ToTable("idps", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.IdpOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdpId")
                        .HasColumnType("integer")
                        .HasColumnName("idp_id");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.Property<string>("Token")
                        .HasColumnType("character varying")
                        .HasColumnName("token");

                    b.HasKey("Id")
                        .HasName("idp_owners_pkey");

                    b.ToTable("idp_owners", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.LoadWollenbergConstant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("A")
                        .HasColumnType("numeric")
                        .HasColumnName("a");

                    b.Property<int?>("Altitude")
                        .HasColumnType("integer")
                        .HasColumnName("altitude");

                    b.Property<decimal?>("B")
                        .HasColumnType("numeric")
                        .HasColumnName("b");

                    b.Property<decimal?>("C")
                        .HasColumnType("numeric")
                        .HasColumnName("c");

                    b.Property<decimal?>("D")
                        .HasColumnType("numeric")
                        .HasColumnName("d");

                    b.HasKey("Id")
                        .HasName("load_wollenberg_constants_pkey");

                    b.HasIndex(new[] { "Altitude" }, "index_load_wollenberg_constants_on_altitude");

                    b.ToTable("load_wollenberg_constants", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.Logbook", b =>
                {
                    b.Property<int?>("FlightId")
                        .HasColumnType("integer")
                        .HasColumnName("flight_id");

                    b.Property<string>("LoadId")
                        .HasColumnType("character varying")
                        .HasColumnName("load_id");

                    b.Property<DateTime?>("OffBlock")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("off_block");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.Property<decimal?>("RadiationAmount")
                        .HasPrecision(10, 6)
                        .HasColumnType("numeric(10,6)")
                        .HasColumnName("radiation_amount");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.ToTable((string)null);

                    b.ToView("logbook", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.Logbook2", b =>
                {
                    b.Property<int?>("FlightId")
                        .HasColumnType("integer")
                        .HasColumnName("flight_id");

                    b.Property<int?>("FlightRelationId")
                        .HasColumnType("integer")
                        .HasColumnName("flight_relation_id");

                    b.Property<string>("LoadId")
                        .HasColumnType("character varying")
                        .HasColumnName("load_id");

                    b.Property<DateTime?>("OffBlock")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("off_block");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.Property<decimal?>("RadiationAmount")
                        .HasPrecision(10, 6)
                        .HasColumnType("numeric(10,6)")
                        .HasColumnName("radiation_amount");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.ToTable((string)null);

                    b.ToView("logbook2", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.LoginAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("PasswordStart")
                        .HasColumnType("character varying")
                        .HasColumnName("password_start");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("login_attempts_pkey");

                    b.ToTable("login_attempts", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.MailSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("MailType")
                        .HasColumnType("integer")
                        .HasColumnName("mail_type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("mail_subscriptions_pkey");

                    b.HasIndex(new[] { "MailType" }, "index_mail_subscriptions_on_mail_type");

                    b.HasIndex(new[] { "UserId" }, "index_mail_subscriptions_on_user_id");

                    b.ToTable("mail_subscriptions", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.MeasuredRadiation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AvgCorr")
                        .HasColumnType("integer")
                        .HasColumnName("avg_corr");

                    b.Property<int?>("Corr1")
                        .HasColumnType("integer")
                        .HasColumnName("corr1");

                    b.Property<int?>("Corr2")
                        .HasColumnType("integer")
                        .HasColumnName("corr2");

                    b.Property<int?>("Corr3")
                        .HasColumnType("integer")
                        .HasColumnName("corr3");

                    b.Property<int?>("Corr4")
                        .HasColumnType("integer")
                        .HasColumnName("corr4");

                    b.Property<int?>("Corr5")
                        .HasColumnType("integer")
                        .HasColumnName("corr5");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<DateTime?>("UtcTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("utc_time");

                    b.HasKey("Id")
                        .HasName("measured_radiations_pkey");

                    b.HasIndex(new[] { "UtcTime" }, "index_measured_radiations_on_utc_time");

                    b.ToTable("measured_radiations", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.MeasurementLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasColumnType("character varying")
                        .HasColumnName("address1");

                    b.Property<string>("Address2")
                        .HasColumnType("character varying")
                        .HasColumnName("address2");

                    b.Property<string>("Address3")
                        .HasColumnType("character varying")
                        .HasColumnName("address3");

                    b.Property<decimal?>("Altitude")
                        .HasColumnType("numeric")
                        .HasColumnName("altitude");

                    b.Property<DateTime?>("LatestUtcDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("latest_utc_date");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric")
                        .HasColumnName("latitude");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<decimal?>("RadiationCoefficient")
                        .HasColumnType("numeric")
                        .HasColumnName("radiation_coefficient");

                    b.Property<string>("Website")
                        .HasColumnType("character varying")
                        .HasColumnName("website");

                    b.HasKey("Id")
                        .HasName("measurement_locations_pkey");

                    b.ToTable("measurement_locations", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<bool?>("AirlineApiPostRadiation")
                        .HasColumnType("boolean")
                        .HasColumnName("airline_api_post_radiation");

                    b.Property<string>("AirlineApiUserIdentifier")
                        .HasColumnType("character varying")
                        .HasColumnName("airline_api_user_identifier");

                    b.Property<string>("AirlineApiUserSecret")
                        .HasColumnType("character varying")
                        .HasColumnName("airline_api_user_secret");

                    b.Property<string>("City")
                        .HasColumnType("character varying")
                        .HasColumnName("city");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("CsvSeparators")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("csv_separators");

                    b.Property<string>("DefaultUserEmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("default_user_email")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateOnly?>("EarlyBoundary")
                        .HasColumnType("date")
                        .HasColumnName("early_boundary");

                    b.Property<string>("EmailRecipients")
                        .HasColumnType("text")
                        .HasColumnName("email_recipients");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("entry_date");

                    b.Property<string>("FlightDataSource")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("flight_data_source")
                        .HasDefaultValueSql("'ftp'::character varying");

                    b.Property<string>("FtpPassword")
                        .HasColumnType("character varying")
                        .HasColumnName("ftp_password");

                    b.Property<string>("FtpUsername")
                        .HasColumnType("character varying")
                        .HasColumnName("ftp_username");

                    b.Property<string>("IcaoCode")
                        .HasColumnType("character varying")
                        .HasColumnName("icao_code");

                    b.Property<bool?>("LockoutUsers")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_users");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<int?>("OwnerTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_type_id");

                    b.Property<string>("PostalCode")
                        .HasColumnType("character varying")
                        .HasColumnName("postal_code");

                    b.Property<string>("Prefix")
                        .HasColumnType("character varying")
                        .HasColumnName("prefix");

                    b.Property<bool?>("ProcessFlightAware")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("process_flight_aware");

                    b.Property<bool?>("PublishRrtRad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("publish_rrt_rad");

                    b.Property<string>("SecretIdentifier")
                        .HasColumnType("character varying")
                        .HasColumnName("secret_identifier");

                    b.Property<bool?>("SendDailyMails")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("send_daily_mails");

                    b.Property<string>("StorageType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("storage_type")
                        .HasDefaultValueSql("'ftp'::character varying");

                    b.Property<string>("StreetAddress1")
                        .HasColumnType("character varying")
                        .HasColumnName("street_address1");

                    b.Property<string>("StreetAddress2")
                        .HasColumnType("character varying")
                        .HasColumnName("street_address2");

                    b.Property<int?>("ThresholdHigh")
                        .HasColumnType("integer")
                        .HasColumnName("threshold_high");

                    b.Property<int?>("ThresholdLow")
                        .HasColumnType("integer")
                        .HasColumnName("threshold_low");

                    b.Property<int?>("ThresholdPregnantHigh")
                        .HasColumnType("integer")
                        .HasColumnName("threshold_pregnant_high");

                    b.Property<int?>("ThresholdPregnantLow")
                        .HasColumnType("integer")
                        .HasColumnName("threshold_pregnant_low");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("owners_pkey");

                    b.ToTable("owners", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.OwnerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("owner_types_pkey");

                    b.ToTable("owner_types", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.PostLaunchOldSystemFlight", b =>
                {
                    b.Property<string>("AcReg")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("ac_reg");

                    b.Property<int?>("AircraftId")
                        .HasColumnType("integer")
                        .HasColumnName("aircraft_id");

                    b.Property<int?>("AircraftModelId")
                        .HasColumnType("integer")
                        .HasColumnName("aircraft_model_id");

                    b.Property<List<int>>("AlternativeFlghts")
                        .HasColumnType("integer[]")
                        .HasColumnName("alternative_flghts");

                    b.Property<bool?>("Concurrent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("concurrent");

                    b.Property<string>("Csv")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("csv");

                    b.Property<string>("DepartureCode")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("departure_code");

                    b.Property<string>("FlightName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("flight_name");

                    b.Property<int?>("FlightSeq")
                        .HasColumnType("integer")
                        .HasColumnName("flight_seq");

                    b.Property<int?>("MatchedFlight")
                        .HasColumnType("integer")
                        .HasColumnName("matched_flight");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("message");

                    b.Property<DateTime?>("OffBlock")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("off_block");

                    b.Property<decimal?>("Radiation")
                        .HasPrecision(10, 6)
                        .HasColumnType("numeric(10,6)")
                        .HasColumnName("radiation");

                    b.ToTable("post_launch_old_system_flights", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.PreviousAircraftExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AircraftType")
                        .HasColumnType("character varying")
                        .HasColumnName("aircraft_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("Hours")
                        .HasColumnType("integer")
                        .HasColumnName("hours");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("previous_aircraft_experiences_pkey");

                    b.ToTable("previous_aircraft_experiences", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.PreviousEmployment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("AccumulatedAt")
                        .HasColumnType("date")
                        .HasColumnName("accumulated_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<double?>("FoHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasColumnName("fo_hours")
                        .HasDefaultValueSql("0.0");

                    b.Property<double?>("IfrHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasColumnName("ifr_hours")
                        .HasDefaultValueSql("0.0");

                    b.Property<double?>("InstructorHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasColumnName("instructor_hours")
                        .HasDefaultValueSql("0.0");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<double?>("NightHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasColumnName("night_hours")
                        .HasDefaultValueSql("0.0");

                    b.Property<double?>("PicHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasColumnName("pic_hours")
                        .HasDefaultValueSql("0.0");

                    b.Property<double?>("SimulatorHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasColumnName("simulator_hours")
                        .HasDefaultValueSql("0.0");

                    b.Property<double?>("StudentHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasColumnName("student_hours")
                        .HasDefaultValueSql("0.0");

                    b.Property<double?>("TotalHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasColumnName("total_hours")
                        .HasDefaultValueSql("0.0");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("previous_employments_pkey");

                    b.ToTable("previous_employments", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.RadDiff", b =>
                {
                    b.Property<int?>("AcId")
                        .HasColumnType("integer")
                        .HasColumnName("ac_id");

                    b.Property<string>("ArrIata")
                        .HasColumnType("character varying")
                        .HasColumnName("arr_iata");

                    b.Property<string>("ArrPort")
                        .HasColumnType("character varying")
                        .HasColumnName("arr_port");

                    b.Property<string>("Callsign")
                        .HasColumnType("character varying")
                        .HasColumnName("callsign");

                    b.Property<string>("DepIata")
                        .HasColumnType("character varying")
                        .HasColumnName("dep_iata");

                    b.Property<string>("DepPort")
                        .HasColumnType("character varying")
                        .HasColumnName("dep_port");

                    b.Property<double?>("GctRad")
                        .HasColumnType("double precision")
                        .HasColumnName("gct_rad");

                    b.Property<int?>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("character varying")
                        .HasColumnName("manufacturer");

                    b.Property<string>("Model")
                        .HasColumnType("character varying")
                        .HasColumnName("model");

                    b.Property<int?>("ModelId")
                        .HasColumnType("integer")
                        .HasColumnName("model_id");

                    b.Property<DateTime?>("OffBlock")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("off_block");

                    b.Property<double?>("RadDiff1")
                        .HasColumnType("double precision")
                        .HasColumnName("rad_diff");

                    b.Property<double?>("RadDiffPct")
                        .HasColumnType("double precision")
                        .HasColumnName("rad_diff_pct");

                    b.Property<double?>("RealDiff")
                        .HasColumnType("double precision")
                        .HasColumnName("real_diff");

                    b.Property<string>("RegistrationCode")
                        .HasColumnType("character varying")
                        .HasColumnName("registration_code");

                    b.Property<double?>("RrtRad")
                        .HasColumnType("double precision")
                        .HasColumnName("rrt_rad");

                    b.Property<string>("TypeName")
                        .HasColumnType("character varying")
                        .HasColumnName("type_name");

                    b.ToTable((string)null);

                    b.ToView("rad_diff", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<bool?>("Selectable")
                        .HasColumnType("boolean")
                        .HasColumnName("selectable");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("roles_pkey");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.SchemaMigration", b =>
                {
                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("version");

                    b.HasIndex(new[] { "Version" }, "unique_schema_migrations")
                        .IsUnique();

                    b.ToTable("schema_migrations", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.SecondaryRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("secondary_roles_pkey");

                    b.ToTable("secondary_roles", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.StukReportDreamjet2015", b =>
                {
                    b.Property<string>("AirHours")
                        .HasColumnType("text")
                        .HasColumnName("Air hours");

                    b.Property<string>("AircraftModel")
                        .HasMaxLength(8)
                        .HasColumnType("character(8)")
                        .HasColumnName("Aircraft model")
                        .IsFixedLength();

                    b.Property<string>("AirlineId")
                        .HasMaxLength(5)
                        .HasColumnType("character(5)")
                        .HasColumnName("airline_id")
                        .IsFixedLength();

                    b.Property<char?>("Category")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)");

                    b.Property<string>("DosimeterReading")
                        .HasMaxLength(8)
                        .HasColumnType("character(8)")
                        .HasColumnName("Dosimeter Reading")
                        .IsFixedLength();

                    b.Property<string>("Effekt")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .IsFixedLength();

                    b.Property<string>("Empty1")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("Empty 1")
                        .IsFixedLength();

                    b.Property<char?>("Empty2")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("Empty 2");

                    b.Property<string>("Empty4")
                        .HasMaxLength(3)
                        .HasColumnType("character(3)")
                        .HasColumnName("Empty 4")
                        .IsFixedLength();

                    b.Property<string>("Empty5")
                        .HasMaxLength(30)
                        .HasColumnType("character(30)")
                        .HasColumnName("Empty 5")
                        .IsFixedLength();

                    b.Property<string>("FirstWorkingDay")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("First Working Day")
                        .IsFixedLength();

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("IntervalEnd")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("Interval end")
                        .IsFixedLength();

                    b.Property<string>("IntervalStart")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("Interval start")
                        .IsFixedLength();

                    b.Property<string>("LastWorkingDay")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("Last Working Day")
                        .IsFixedLength();

                    b.Property<string>("Method")
                        .HasMaxLength(3)
                        .HasColumnType("character(3)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("character(30)")
                        .IsFixedLength();

                    b.Property<string>("Nationality")
                        .HasMaxLength(15)
                        .HasColumnType("character(15)")
                        .IsFixedLength();

                    b.Property<string>("RadiationAmount")
                        .HasColumnType("text")
                        .HasColumnName("radiation_amount");

                    b.Property<string>("RadiationType")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("Radiation type")
                        .IsFixedLength();

                    b.Property<string>("SocialSecNum")
                        .HasMaxLength(16)
                        .HasColumnType("character(16)")
                        .HasColumnName("Social Sec Num")
                        .IsFixedLength();

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.ToTable((string)null);

                    b.ToView("stuk_report_dreamjet_2015", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.StukReportJettime2015", b =>
                {
                    b.Property<string>("AirHours")
                        .HasColumnType("text")
                        .HasColumnName("Air hours");

                    b.Property<string>("AircraftModel")
                        .HasMaxLength(8)
                        .HasColumnType("character(8)")
                        .HasColumnName("Aircraft model")
                        .IsFixedLength();

                    b.Property<string>("AirlineId")
                        .HasMaxLength(5)
                        .HasColumnType("character(5)")
                        .HasColumnName("airline_id")
                        .IsFixedLength();

                    b.Property<char?>("Category")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)");

                    b.Property<string>("DosimeterReading")
                        .HasMaxLength(8)
                        .HasColumnType("character(8)")
                        .HasColumnName("Dosimeter Reading")
                        .IsFixedLength();

                    b.Property<string>("Effekt")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .IsFixedLength();

                    b.Property<string>("Empty1")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("Empty 1")
                        .IsFixedLength();

                    b.Property<char?>("Empty2")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("Empty 2");

                    b.Property<string>("Empty4")
                        .HasMaxLength(3)
                        .HasColumnType("character(3)")
                        .HasColumnName("Empty 4")
                        .IsFixedLength();

                    b.Property<string>("Empty5")
                        .HasMaxLength(30)
                        .HasColumnType("character(30)")
                        .HasColumnName("Empty 5")
                        .IsFixedLength();

                    b.Property<string>("FirstWorkingDay")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("First Working Day")
                        .IsFixedLength();

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("IntervalEnd")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("Interval end")
                        .IsFixedLength();

                    b.Property<string>("IntervalStart")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("Interval start")
                        .IsFixedLength();

                    b.Property<string>("LastWorkingDay")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("Last Working Day")
                        .IsFixedLength();

                    b.Property<string>("Method")
                        .HasMaxLength(3)
                        .HasColumnType("character(3)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("character(30)")
                        .IsFixedLength();

                    b.Property<string>("Nationality")
                        .HasMaxLength(3)
                        .HasColumnType("character(3)")
                        .IsFixedLength();

                    b.Property<string>("RadiationAmount")
                        .HasColumnType("text")
                        .HasColumnName("radiation_amount");

                    b.Property<string>("RadiationType")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("Radiation type")
                        .IsFixedLength();

                    b.Property<string>("SocialSecNum")
                        .HasMaxLength(11)
                        .HasColumnType("character(11)")
                        .HasColumnName("Social Sec Num")
                        .IsFixedLength();

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.ToTable((string)null);

                    b.ToView("stuk_report_jettime_2015", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.StukReportJettime2016", b =>
                {
                    b.Property<string>("AirHours")
                        .HasColumnType("text")
                        .HasColumnName("Air hours");

                    b.Property<string>("AircraftModel")
                        .HasMaxLength(8)
                        .HasColumnType("character(8)")
                        .HasColumnName("Aircraft model")
                        .IsFixedLength();

                    b.Property<string>("AirlineId")
                        .HasMaxLength(5)
                        .HasColumnType("character(5)")
                        .HasColumnName("airline_id")
                        .IsFixedLength();

                    b.Property<char?>("Category")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)");

                    b.Property<string>("DosimeterReading")
                        .HasMaxLength(8)
                        .HasColumnType("character(8)")
                        .HasColumnName("Dosimeter Reading")
                        .IsFixedLength();

                    b.Property<string>("Effekt")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .IsFixedLength();

                    b.Property<string>("Empty1")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("Empty 1")
                        .IsFixedLength();

                    b.Property<char?>("Empty2")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("Empty 2");

                    b.Property<string>("Empty4")
                        .HasMaxLength(3)
                        .HasColumnType("character(3)")
                        .HasColumnName("Empty 4")
                        .IsFixedLength();

                    b.Property<string>("Empty5")
                        .HasMaxLength(30)
                        .HasColumnType("character(30)")
                        .HasColumnName("Empty 5")
                        .IsFixedLength();

                    b.Property<string>("FirstWorkingDay")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("First Working Day")
                        .IsFixedLength();

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("IntervalEnd")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("Interval end")
                        .IsFixedLength();

                    b.Property<string>("IntervalStart")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("Interval start")
                        .IsFixedLength();

                    b.Property<string>("LastWorkingDay")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("Last Working Day")
                        .IsFixedLength();

                    b.Property<string>("Method")
                        .HasMaxLength(3)
                        .HasColumnType("character(3)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("character(30)")
                        .IsFixedLength();

                    b.Property<string>("Nationality")
                        .HasMaxLength(3)
                        .HasColumnType("character(3)")
                        .IsFixedLength();

                    b.Property<string>("RadiationAmount")
                        .HasColumnType("text")
                        .HasColumnName("radiation_amount");

                    b.Property<string>("RadiationType")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("Radiation type")
                        .IsFixedLength();

                    b.Property<string>("SocialSecNum")
                        .HasMaxLength(11)
                        .HasColumnType("character(11)")
                        .HasColumnName("Social Sec Num")
                        .IsFixedLength();

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.ToTable((string)null);

                    b.ToView("stuk_report_jettime_2016", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.ThresholdExceedMailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminText")
                        .HasColumnType("text")
                        .HasColumnName("admin_text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<string>("NonpregnantText")
                        .HasColumnType("text")
                        .HasColumnName("nonpregnant_text");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.Property<string>("PregnantText")
                        .HasColumnType("text")
                        .HasColumnName("pregnant_text");

                    b.Property<bool?>("SendToNonpregnant")
                        .HasColumnType("boolean")
                        .HasColumnName("send_to_nonpregnant");

                    b.Property<bool?>("SendToPregnant")
                        .HasColumnType("boolean")
                        .HasColumnName("send_to_pregnant");

                    b.Property<int?>("ThresholdNonpregnant")
                        .HasColumnType("integer")
                        .HasColumnName("threshold_nonpregnant");

                    b.Property<int?>("ThresholdPregnant")
                        .HasColumnType("integer")
                        .HasColumnName("threshold_pregnant");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("threshold_exceed_mail_templates_pkey");

                    b.HasIndex(new[] { "OwnerId" }, "index_threshold_exceed_mail_templates_on_owner_id");

                    b.ToTable("threshold_exceed_mail_templates", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasColumnType("character varying")
                        .HasColumnName("address1");

                    b.Property<string>("Address2")
                        .HasColumnType("character varying")
                        .HasColumnName("address2");

                    b.Property<string>("AuthenticationToken")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("authentication_token");

                    b.Property<string>("Base")
                        .HasColumnType("character varying")
                        .HasColumnName("base");

                    b.Property<string>("CertificateNo")
                        .HasColumnType("character varying")
                        .HasColumnName("certificate_no");

                    b.Property<string>("City")
                        .HasColumnType("character varying")
                        .HasColumnName("city");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("CurrentSignInAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("current_sign_in_at");

                    b.Property<IPAddress>("CurrentSignInIp")
                        .HasColumnType("inet")
                        .HasColumnName("current_sign_in_ip");

                    b.Property<int?>("DefaultRoleId")
                        .HasColumnType("integer")
                        .HasColumnName("default_role_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("email")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("EmployeeNo")
                        .HasColumnType("character varying")
                        .HasColumnName("employee_no");

                    b.Property<string>("EncryptedPassword")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("encrypted_password")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<int>("FailedAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("failed_attempts");

                    b.Property<string>("Gender")
                        .HasColumnType("character varying")
                        .HasColumnName("gender");

                    b.Property<bool?>("HasCompletedFirstLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("has_completed_first_login");

                    b.Property<string>("Initials")
                        .HasColumnType("character varying")
                        .HasColumnName("initials");

                    b.Property<DateTime?>("LastSignInAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_sign_in_at");

                    b.Property<IPAddress>("LastSignInIp")
                        .HasColumnType("inet")
                        .HasColumnName("last_sign_in_ip");

                    b.Property<DateTime?>("LatestFlightAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("latest_flight_at");

                    b.Property<string>("LoadId")
                        .HasColumnType("character varying")
                        .HasColumnName("load_id");

                    b.Property<DateTime?>("LockedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("locked_at");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Nationality")
                        .HasColumnType("character varying")
                        .HasColumnName("nationality");

                    b.Property<string>("OldPassword")
                        .HasColumnType("character varying")
                        .HasColumnName("old_password");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.Property<string>("PhoneMobile")
                        .HasColumnType("character varying")
                        .HasColumnName("phone_mobile");

                    b.Property<string>("PhoneOffice")
                        .HasColumnType("character varying")
                        .HasColumnName("phone_office");

                    b.Property<DateOnly?>("PregDeclaredAt")
                        .HasColumnType("date")
                        .HasColumnName("preg_declared_at");

                    b.Property<bool?>("PregGrounded")
                        .HasColumnType("boolean")
                        .HasColumnName("preg_grounded");

                    b.Property<double?>("RadCalYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasColumnName("rad_cal_year")
                        .HasDefaultValueSql("0.0");

                    b.Property<double?>("RadFullYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasColumnName("rad_full_year")
                        .HasDefaultValueSql("0.0");

                    b.Property<double?>("RadPregnant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasColumnName("rad_pregnant")
                        .HasDefaultValueSql("0.0");

                    b.Property<double?>("RadTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasColumnName("rad_total")
                        .HasDefaultValueSql("0.0");

                    b.Property<DateTime?>("RadUpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("rad_updated_at");

                    b.Property<DateTime?>("RememberCreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("remember_created_at");

                    b.Property<DateTime?>("ResetPasswordSentAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("reset_password_sent_at");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("character varying")
                        .HasColumnName("reset_password_token");

                    b.Property<int?>("RolesMask")
                        .HasColumnType("integer")
                        .HasColumnName("roles_mask");

                    b.Property<int>("SignInCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("sign_in_count");

                    b.Property<string>("SocSecNo")
                        .HasColumnType("character varying")
                        .HasColumnName("soc_sec_no");

                    b.Property<string>("SsoIdpId")
                        .HasColumnType("character varying")
                        .HasColumnName("sso_idp_id");

                    b.Property<string>("SsoIdpIp")
                        .HasColumnType("character varying")
                        .HasColumnName("sso_idp_ip");

                    b.Property<DateTime?>("SsoSignedInAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sso_signed_in_at");

                    b.Property<string>("SsoToken")
                        .HasColumnType("character varying")
                        .HasColumnName("sso_token");

                    b.Property<DateTime?>("SsoTokenCreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sso_token_created_at");

                    b.Property<string>("State")
                        .HasColumnType("character varying")
                        .HasColumnName("state");

                    b.Property<string>("UnlockToken")
                        .HasColumnType("character varying")
                        .HasColumnName("unlock_token");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .HasColumnType("character varying")
                        .HasColumnName("username");

                    b.Property<string>("Zip")
                        .HasColumnType("character varying")
                        .HasColumnName("zip");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "AuthenticationToken" }, "index_users_on_authentication_token")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "index_users_on_email");

                    b.HasIndex(new[] { "LoadId" }, "index_users_on_load_id");

                    b.HasIndex(new[] { "OwnerId" }, "index_users_on_owner_id");

                    b.HasIndex(new[] { "ResetPasswordToken" }, "index_users_on_reset_password_token")
                        .IsUnique();

                    b.HasIndex(new[] { "UnlockToken" }, "index_users_on_unlock_token")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.UserLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("LinkedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("linked_user_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("user_links_pkey");

                    b.HasIndex(new[] { "LinkedUserId" }, "index_user_links_on_linked_user_id");

                    b.HasIndex(new[] { "UserId" }, "index_user_links_on_user_id");

                    b.ToTable("user_links", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.Version", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("event");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("item_type");

                    b.Property<string>("Object")
                        .HasColumnType("text")
                        .HasColumnName("object");

                    b.Property<string>("ObjectChanges")
                        .HasColumnType("text")
                        .HasColumnName("object_changes");

                    b.Property<string>("Whodunnit")
                        .HasColumnType("character varying")
                        .HasColumnName("whodunnit");

                    b.HasKey("Id")
                        .HasName("versions_pkey");

                    b.HasIndex(new[] { "ItemType", "ItemId" }, "index_versions_on_item_type_and_item_id");

                    b.ToTable("versions", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.VwAircraft", b =>
                {
                    b.Property<int?>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("ManName")
                        .HasColumnType("character varying")
                        .HasColumnName("man_name");

                    b.Property<string>("ModName")
                        .HasColumnType("character varying")
                        .HasColumnName("mod_name");

                    b.Property<string>("RegistrationCode")
                        .HasColumnType("character varying")
                        .HasColumnName("registration_code");

                    b.ToTable((string)null);

                    b.ToView("vw_aircraft", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.WideroeMissingCrewOperation", b =>
                {
                    b.Property<int?>("AirportId")
                        .HasColumnType("integer")
                        .HasColumnName("airport_id");

                    b.Property<string>("CrewFileName")
                        .HasColumnType("character varying")
                        .HasColumnName("crew_file_name");

                    b.Property<string>("CrewLineContent")
                        .HasColumnType("character varying")
                        .HasColumnName("crew_line_content");

                    b.Property<int?>("CrewLineNumber")
                        .HasColumnType("integer")
                        .HasColumnName("crew_line_number");

                    b.Property<DateTime?>("FfMtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ff_mtime");

                    b.Property<string>("FlightFileName")
                        .HasColumnType("character varying")
                        .HasColumnName("flight_file_name");

                    b.Property<int?>("FlightId")
                        .HasColumnType("integer")
                        .HasColumnName("flight_id");

                    b.Property<string>("FlightLineContent")
                        .HasColumnType("character varying")
                        .HasColumnName("flight_line_content");

                    b.Property<int?>("FlightLineNumber")
                        .HasColumnType("integer")
                        .HasColumnName("flight_line_number");

                    b.Property<string>("FlightName")
                        .HasColumnType("character varying")
                        .HasColumnName("flight_name");

                    b.Property<string>("FtpUsername")
                        .HasColumnType("character varying")
                        .HasColumnName("ftp_username");

                    b.Property<string>("IataCode")
                        .HasColumnType("character varying")
                        .HasColumnName("iata_code");

                    b.Property<string>("IcaoCode")
                        .HasColumnType("character varying")
                        .HasColumnName("icao_code");

                    b.Property<int?>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("LoadId")
                        .HasColumnType("character varying")
                        .HasColumnName("load_id");

                    b.Property<string>("OffBlock")
                        .HasColumnType("text")
                        .HasColumnName("off_block");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.Property<string>("RoleName")
                        .HasColumnType("character varying")
                        .HasColumnName("role_name");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.ToTable("wideroe_missing_crew_operations", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.WorldRadiationCoefficient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Altitude")
                        .HasColumnType("integer")
                        .HasColumnName("altitude");

                    b.Property<DateTime?>("LastGenerationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_generation_date");

                    b.Property<int?>("Latitude")
                        .HasColumnType("integer")
                        .HasColumnName("latitude");

                    b.Property<int?>("Longitude")
                        .HasColumnType("integer")
                        .HasColumnName("longitude");

                    b.Property<decimal?>("RadiationCoefficient")
                        .HasColumnType("numeric")
                        .HasColumnName("radiation_coefficient");

                    b.HasKey("Id")
                        .HasName("world_radiation_coefficients_pkey");

                    b.HasIndex(new[] { "Altitude", "Latitude", "Longitude" }, "index_world_radiation_coefficients_combined");

                    b.HasIndex(new[] { "Altitude" }, "index_world_radiation_coefficients_on_altitude");

                    b.HasIndex(new[] { "Latitude" }, "index_world_radiation_coefficients_on_latitude");

                    b.HasIndex(new[] { "Longitude" }, "index_world_radiation_coefficients_on_longitude");

                    b.ToTable("world_radiation_coefficients", (string)null);
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.ApiRequest", b =>
                {
                    b.HasOne("DatabaserForUdviklere.Models.Owner", "Owner")
                        .WithMany("ApiRequests")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_rails_b5b779aad8");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.FlightTrack", b =>
                {
                    b.HasOne("DatabaserForUdviklere.Models.Flight", "Flight")
                        .WithMany("FlightTracks")
                        .HasForeignKey("FlightId")
                        .HasConstraintName("fk_rails_19c21afc6a");

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.MailSubscription", b =>
                {
                    b.HasOne("DatabaserForUdviklere.Models.User", "User")
                        .WithMany("MailSubscriptions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_rails_bba4ffe2f0");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.ThresholdExceedMailTemplate", b =>
                {
                    b.HasOne("DatabaserForUdviklere.Models.Owner", "Owner")
                        .WithMany("ThresholdExceedMailTemplates")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_rails_9778d7dddf");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.Flight", b =>
                {
                    b.Navigation("FlightTracks");
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.Owner", b =>
                {
                    b.Navigation("ApiRequests");

                    b.Navigation("ThresholdExceedMailTemplates");
                });

            modelBuilder.Entity("DatabaserForUdviklere.Models.User", b =>
                {
                    b.Navigation("MailSubscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
